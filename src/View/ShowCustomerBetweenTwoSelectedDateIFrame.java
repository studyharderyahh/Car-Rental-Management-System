/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package View;

import Model.CarModel;
import Model.Customer;
import Model.Gender;
import Model.IndividualCar;
import Model.RentalRecord;
import Model.StatusoftheCar;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import qualitycars.CarRentalSystem;

/* * * * * * * * * 
 * @author Elisa *
 * @ID 220005803 * 
 * * * * * * * * */
public class ShowCustomerBetweenTwoSelectedDateIFrame extends javax.swing.JInternalFrame {

    DefaultTableModel model;
    CarRentalSystem rentedcar;

    /**
     * Creates new form ShowCustomerIFrame
     */
    public ShowCustomerBetweenTwoSelectedDateIFrame() {
        initComponents();

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        Date date1 = null;
        Date date2 = null;
        Date date3 = null;
        Date date4 = null;
        Date date5 = null;
        Date date6 = null;
        Date date7 = null;
        Date date8 = null;
        Date date9 = null;
        Date date10 = null;
        Date date11 = null;
        Date date12 = null;
        Date date13 = null;
        Date date14 = null;
        Date date15 = null;
        Date date16 = null;

        try {
            date1 = dateFormat.parse("2025-08-09");
            date2 = dateFormat.parse("1978-03-25");
            date3 = dateFormat.parse("2025-08-14");
            date4 = dateFormat.parse("1889-09-12");
            date5 = dateFormat.parse("2023-08-14");
            date6 = dateFormat.parse("2023-10-14");
            date7 = dateFormat.parse("2022-05-24");
            date8 = dateFormat.parse("2022-07-21");
            date9 = dateFormat.parse("2024-06-15");
            date10 = dateFormat.parse("1997-09-30");
            date11 = dateFormat.parse("2026-11-05");
            date12 = dateFormat.parse("1979-04-18");
            date13 = dateFormat.parse("2023-01-12");
            date14 = dateFormat.parse("2023-03-14");
            date15 = dateFormat.parse("2023-09-10");
            date16 = dateFormat.parse("2022-10-21");
        } catch (ParseException e) {
            e.printStackTrace();// Handle the parsing exception
        }

        model = (DefaultTableModel) CustomerDetailTable.getModel();
        Customer customer1 = new Customer("0951843", "restriced", date1, "C010", "Bolton", Gender.MALE, date2, "123 Street Papakura Auckland", "0268739465");
        Customer customer2 = new Customer("220345", "Full License", date3, "C09", "Eden", Gender.MALE, date4, "123 Street Manurewa Auckland", "24674527472");
        Customer customer3 = new Customer("112233", "Full License", date9, "C011", "Alice", Gender.FEMALE, date10, "456 Broadway Auckland", "0987654321");
        Customer customer4 = new Customer("445566", "Learner's Permit", date11, "C12", "Bob", Gender.MALE, date12, "789 Oak Street Hamilton", "0123456789");

        IndividualCar indCar1 = new IndividualCar("XYZ789", "Blue", 8000, StatusoftheCar.RentedOut);
        IndividualCar indCar2 = new IndividualCar("PQR789", "White", 2000, StatusoftheCar.RentedOut);
        IndividualCar indCar3 = new IndividualCar("ABC123", "Red", 15000, StatusoftheCar.RentedOut);
        IndividualCar indCar4 = new IndividualCar("DEF456", "Black", 10000, StatusoftheCar.RentedOut);

        RentalRecord record1 = new RentalRecord(date5, date6, customer1, indCar1, new CarModel(" Camry", "Toyota", "Petrol", 5, 25000));
        RentalRecord record2 = new RentalRecord(date7, date8, customer2, indCar2, new CarModel(" Accord", "Honda", "Hybrid", 5, 28000));
        RentalRecord record3 = new RentalRecord(date13, date14, customer3, indCar3, new CarModel("Civic", "Honda", "Petrol", 5, 22000));
        RentalRecord record4 = new RentalRecord(date15, date16, customer4, indCar4, new CarModel("Corolla", "Toyota", "Hybrid", 5, 26000));

        // Add customers and rental records to the CarRentalSystem
        ArrayList<Customer> customers = new ArrayList<>();
        customers.add(customer1);
        customers.add(customer2);
        customers.add(customer3);
        customers.add(customer4);

        ArrayList<RentalRecord> rentalRecords = new ArrayList<>();
        rentalRecords.add(record1);
        rentalRecords.add(record2);
        rentalRecords.add(record3);
        rentalRecords.add(record4);
        rentedcar = new CarRentalSystem(customers, rentalRecords);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        datePickPanel = new javax.swing.JPanel();
        startDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        goBackButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        endDatePicker = new org.jdesktop.swingx.JXDatePicker();
        deleteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CustomerDetailTable = new javax.swing.JTable();

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 51, 255));
        jLabel4.setText("Select two dates to find customers: ");

        datePickPanel.setBackground(new java.awt.Color(204, 204, 255));
        datePickPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Car Rented Date Record", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(0, 102, 204))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Started Date: ");

        searchButton.setBackground(new java.awt.Color(51, 0, 255));
        searchButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 204));
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        goBackButton.setBackground(new java.awt.Color(255, 51, 0));
        goBackButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        goBackButton.setForeground(new java.awt.Color(255, 255, 255));
        goBackButton.setText("Go Back");
        goBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setText("Started Date: ");

        deleteButton.setBackground(new java.awt.Color(51, 0, 255));
        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 204));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout datePickPanelLayout = new javax.swing.GroupLayout(datePickPanel);
        datePickPanel.setLayout(datePickPanelLayout);
        datePickPanelLayout.setHorizontalGroup(
            datePickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePickPanelLayout.createSequentialGroup()
                .addGroup(datePickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jLabel11)
                    .addComponent(startDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(endDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(datePickPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(datePickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(goBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        datePickPanelLayout.setVerticalGroup(
            datePickPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePickPanelLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(goBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        CustomerDetailTable.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        CustomerDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Gender", "Address", "Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(CustomerDetailTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(datePickPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(180, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(datePickPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        // Get the selected start and end dates
        Date startDate = startDatePicker.getDate();
        Date endDate = endDatePicker.getDate();

        if (startDate == null || endDate == null) {
            JOptionPane.showMessageDialog(rootPane, "Please select both start and end dates.");
        }

        ArrayList<RentalRecord> recordsBetweenDates = rentedcar.getRentalRecordsBetweenDates(startDate, endDate);

        // Check if any records were found
        if (recordsBetweenDates.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No data found between the selected dates.");
        } else {
            // Data found, update the table
            updateTable(recordsBetweenDates);
            JOptionPane.showMessageDialog(rootPane, "Data found successfully.");
        }

    }//GEN-LAST:event_searchButtonActionPerformed
    private void updateTable(ArrayList<RentalRecord> records) {
        model.setRowCount(0); // Clear the table

        for (RentalRecord record : records) {
            addRowToTable(record);
        }
    }

    private void addRowToTable(RentalRecord record) {
        Object rows[] = new Object[4];

        Customer customer = record.getCustomer();
        rows[0] = customer.getName();
        rows[1] = customer.getGender();
        rows[2] = customer.getAddress();
        rows[3] = customer.getPhone();
        model.addRow(rows);

        // Set the table model to the JTable
        CustomerDetailTable.setModel(model);
    }
    private void goBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButtonActionPerformed
        // TODO add your handling code here:
        CustomerDashboardInternalFrame dashBoard = new CustomerDashboardInternalFrame();
        dashBoard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_goBackButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        // Get the selected row
        int selectedRow = CustomerDetailTable.getSelectedRow();

        // Check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        // Get the person ID from the selected row
        String personIdToDelete = (String) CustomerDetailTable.getValueAt(selectedRow, 0);

        // Display a confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this employee?", "Confirm Delete", JOptionPane.YES_NO_OPTION);

        // Check the user's response
        if (confirm == JOptionPane.YES_OPTION) {
            // Remove the selected row from the table model
            model.removeRow(selectedRow);
            HomeForm.person.removeCustomerById(personIdToDelete);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CustomerDetailTable;
    private javax.swing.JPanel datePickPanel;
    private javax.swing.JButton deleteButton;
    private org.jdesktop.swingx.JXDatePicker endDatePicker;
    private javax.swing.JButton goBackButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchButton;
    private org.jdesktop.swingx.JXDatePicker startDatePicker;
    // End of variables declaration//GEN-END:variables
}
